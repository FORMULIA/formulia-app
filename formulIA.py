import streamlit as st
from openpyxl import load_workbook

st.set_page_config(page_title="FormulIA - Generador de propuestas", layout="centered")

st.title("üß† FormulIA")
st.subheader("Sistema automatizado para estructuraci√≥n de propuestas")
st.markdown("---")

# Paso 1: Componentes

st.header("1Ô∏è‚É£ ¬øQu√© componentes incluye tu propuesta?")
componentes = st.multiselect(
    "Selecciona uno o varios:",
    ["Formaci√≥n", "Monitoreo y Evaluaci√≥n", "Materiales", "Operaci√≥n"]
)

# Paso 2: Modalidad
modalidades = {}
for comp in ["Formaci√≥n", "Operaci√≥n"]:
    if comp in componentes:
        modalidades[comp] = st.selectbox(
            f"¬øQu√© modalidad tendr√° el componente {comp}?",
            ["Presencial", "Virtual", "H√≠brida"],
            key=f"modalidad_{comp}"
        )

# Paso 3: Organizaci√≥n y municipio
st.header("2Ô∏è‚É£ Datos generales del proyecto")

# Mostrar los campos con valor por defecto desde session_state
org = st.text_input(
    "¬øA qu√© organizaci√≥n se dirige la propuesta?",
    value=st.session_state.get("organizacion", "")
)
municipio = st.text_input(
    "¬øEn qu√© municipio se ejecutar√° el proyecto?",
    value=st.session_state.get("municipio", "")
)

# Guardar los valores en session_state para uso posterior
if org:
    st.session_state["organizacion"] = org
if municipio:
    st.session_state["municipio"] = municipio


# Paso 4: Estrategias pedag√≥gicas
st.header("3Ô∏è‚É£ Estrategias pedag√≥gicas")
estrategias = st.multiselect(
    "¬øQu√© estrategias deseas aplicar?",
    ["Transici√≥n", "Primero", "Remediaci√≥n"]
)

# Paso 5: Sedes educativas
st.header("4Ô∏è‚É£ Sedes educativas")

# Guardar n√∫mero de sedes
num_sedes = st.number_input(
    "¬øCu√°ntas sedes ser√°n impactadas?",
    min_value=1,
    value=st.session_state.get("num_sedes", 1),
    step=1
)
st.session_state["num_sedes"] = num_sedes

# Capturar nombres de sedes y guardarlos
sedes = st.session_state.get("sedes", [""] * int(num_sedes))

for i in range(int(num_sedes)):
    sede = st.text_input(f"Nombre de la sede #{i+1}", value=sedes[i], key=f"sede_{i}")
    sedes[i] = sede

st.session_state["sedes"] = sedes

# Paso 6: Estudiantes y docentes
st.header("5Ô∏è‚É£ Registro de estudiantes y docentes por sede")

poblacion_por_sede = {}
grados_por_estrategia = {
    "Transici√≥n": ["0¬∞"],
    "Primero": ["1¬∞"],
    "Remediaci√≥n": ["2¬∞", "3¬∞", "4¬∞", "5¬∞"]
}

grados_requeridos = set()
for est in estrategias:
    grados_requeridos.update(grados_por_estrategia[est])

incluir_todos_docentes = st.radio(
    "¬øDeseas incluir a los docentes de todos los grados?",
    ["S√≠", "No"]
)

for sede in sedes:
    st.subheader(f"Sede: {sede}")
    poblacion_por_sede[sede] = {}
    for grado in ["0¬∞", "1¬∞", "2¬∞", "3¬∞", "4¬∞", "5¬∞"]:
        incluir_grado = grado in grados_requeridos or incluir_todos_docentes == "S√≠"
        if incluir_grado:
            col1, col2 = st.columns(2)
            with col1:
                est = st.number_input(f"üë©‚Äçüéì Estudiantes en {grado} - {sede}", min_value=0, key=f"{sede}_{grado}_est")
            with col2:
                doc = st.number_input(f"üë®‚Äçüè´ Docentes en {grado} - {sede}", min_value=0, key=f"{sede}_{grado}_doc")
            if doc == 0 and est > 0:
                doc = round(est / 25)
                st.markdown(f"üîé *Docentes estimados: {doc}*")
            poblacion_por_sede[sede][grado] = {"estudiantes": est, "docentes": doc}

st.session_state["poblacion_por_sede"] = poblacion_por_sede

# Calcular totales globales
total_estudiantes = 0
total_docentes = 0

for sede_data in st.session_state["poblacion_por_sede"].values():
    for grado_data in sede_data.values():
        total_estudiantes += grado_data["estudiantes"]
        total_docentes += grado_data["docentes"]

# Guardar en session_state
st.session_state["total_estudiantes"] = total_estudiantes
st.session_state["total_docentes"] = total_docentes

# Paso 7: Materiales
st.header("6Ô∏è‚É£ Selecci√≥n de materiales")
materiales_por_estrategia = {
    "Transici√≥n": ["Cartilla docente transici√≥n", "Cartilla estudiante transici√≥n", "Cartilla de cuentos transici√≥n", "Kit aula transici√≥n"],
    "Primero": ["Gu√≠a docente tomo I", "Gu√≠a docente tomo II", "Gu√≠a estudiante unidad I", "Gu√≠a estudiante unidad II", "Gu√≠a estudiante unidad III", "Gu√≠a estudiante unidad IV", "Libro de cuentos", "Big Book", "Fichas", "Componedores aula", "Componedores individuales"],
    "Remediaci√≥n": ["Gu√≠a docente remediaci√≥n", "Gu√≠a estudiante remediaci√≥n", "Cartilla cuentos remediaci√≥n", "Fichas de apoyo remediaci√≥n"]
}
materiales_seleccionados = {}
for estrategia in estrategias:
    st.subheader(f"üì¶ Materiales para {estrategia}")
    seleccion = st.multiselect(
        f"Selecciona los materiales que deseas incluir para {estrategia}",
        materiales_por_estrategia[estrategia],
        key=f"materiales_{estrategia}"
    )
    materiales_seleccionados[estrategia] = seleccion

st.session_state["materiales_seleccionados"] = materiales_seleccionados

# Paso 8: Log√≠stica (si presencial)
if "Formaci√≥n" in componentes and modalidades.get("Formaci√≥n") == "Presencial":
    st.header("7Ô∏è‚É£ Log√≠stica de formaci√≥n (Presencial)")

    # Inicializa diccionario si no existe
    if "formacion_logistica" not in st.session_state:
        st.session_state["formacion_logistica"] = {}

    # N√∫mero de viajes estimados
    num_viajes = st.number_input(
        "¬øCu√°ntos viajes estimas para desarrollar las formaciones?",
        min_value=1,
        max_value=10,
        value=3,
        step=1
    )
    st.session_state["formacion_logistica"]["num_viajes"] = num_viajes

    # Horas estimadas de viaje ida y vuelta
    horas_viaje = st.number_input(
        "¬øCu√°ntas horas estimas de desplazamiento ida y vuelta?",
        min_value=1,
        max_value=24,
        value=4,
        step=1
    )
    st.session_state["formacion_logistica"]["horas_viaje"] = horas_viaje

    # Tipo de transporte
    tipo_transporte = st.radio("¬øQu√© tipo de transporte se usar√°?", ["Terrestre", "A√©reo"])
    st.session_state["formacion_logistica"]["tipo_transporte"] = tipo_transporte

    # Costo promedio de transporte por visita
    costo_transporte = st.number_input(
        "Costo promedio por visita (COP)",
        min_value=100000,
        value=500000 if tipo_transporte == "A√©reo" else 150000,
        step=50000
    )
    st.session_state["formacion_logistica"]["costo_transporte"] = costo_transporte

    # Costo promedio de hotel por noche
    valor_hotel = st.number_input(
        "Costo promedio por noche de hotel (COP)",
        min_value=50000,
        value=180000,
        step=10000
    )
    st.session_state["formacion_logistica"]["valor_hotel"] = valor_hotel

    # Cargar temas desde Excel (B3:B9)
    try:
        wb_temas = load_workbook("estructura de costos formuLIA.xlsx", data_only=True)
        ws_temas = wb_temas[" FORMACI√ìN"]
        temas_formacion = [ws_temas[f"B{row}"].value for row in range(3, 10) if ws_temas[f"B{row}"].value]
    except Exception as e:
        st.error(f"‚ùå No se pudieron cargar los temas desde el Excel: {e}")
        temas_formacion = []

    temas_seleccionados = st.multiselect(
        "üìö Selecciona los temas que deseas trabajar:",
        temas_formacion
    )
    st.session_state["formacion_logistica"]["temas"] = temas_seleccionados

    # BLOQUE DE REFRIGERIOS
    incluir_refrigerios = st.radio("¬øDeseas incluir refrigerios?", ["S√≠", "No"])
    if incluir_refrigerios == "S√≠":
        try:
            wb_temp = load_workbook("estructura de costos formuLIA.xlsx", data_only=True)
            ws_temp = wb_temp[" FORMACI√ìN"]
            valor_unitario = ws_temp["C24"].value or 8000
        except:
            valor_unitario = 8000

        st.markdown(f"üí∞ Valor actual del refrigerio (desde Excel): **${int(valor_unitario):,} COP**")

        actualizar_valor = st.radio("¬øDeseas actualizar el valor del refrigerio?", ["No", "S√≠"])
        if actualizar_valor == "S√≠":
            valor_unitario = st.number_input(
                "Nuevo valor del refrigerio (COP)",
                min_value=1000,
                value=int(valor_unitario),
                step=500
            )

        num_sesiones = st.number_input("¬øEn cu√°ntas sesiones se ofrecer√°n refrigerios?", min_value=1, step=1)

        # Total docentes desde el estado (sumando todas las sedes)
        total_docentes = sum(info["docentes"] for sede in st.session_state["poblacion_por_sede"].values() for info in sede.values())
        cantidad_refrigerios = int(round(total_docentes * 1.2 * num_sesiones))

        st.success(f"ü•§ Total estimado de refrigerios: {cantidad_refrigerios}")

        st.session_state["refrigerios"] = {
            "valor_unitario": valor_unitario,
            "num_sesiones": num_sesiones,
            "cantidad_refrigerios": cantidad_refrigerios
        }
# Paso 9: Grupos de formaci√≥n
if "Formaci√≥n" in componentes:
    st.header("8Ô∏è‚É£ Grupos de formaci√≥n")
    total_docentes = sum(info["docentes"] for sede in poblacion_por_sede.values() for info in sede.values())
    n_grupos = (total_docentes + 39) // 40
    st.success(f"üë• Total de docentes: {total_docentes}")
    st.info(f"üîπ Se requerir√°n {n_grupos} grupo(s) (m√°x. 40 personas por grupo)")
    st.session_state["grupos_formacion"] = {
        "total_docentes": total_docentes,
        "n_grupos": n_grupos
    }

# Paso 10: Remediaci√≥n
if "Remediaci√≥n" in estrategias:
    st.header("9Ô∏è‚É£ Estrategia de Remediaci√≥n")
    porcentaje_remediacion = st.slider("¬øQu√© porcentaje de estudiantes de 2¬∞ a 5¬∞ requieren remediaci√≥n?", 0, 100, 25)
    total_estudiantes_remediacion = sum(
        info["estudiantes"]
        for sede in poblacion_por_sede.values()
        for grado, info in sede.items()
        if grado in ["2¬∞", "3¬∞", "4¬∞", "5¬∞"]
    )
    estimado = int(round(total_estudiantes_remediacion * porcentaje_remediacion / 100))
    st.success(f"üëßüßí Se estima que {estimado} estudiantes requieren remediaci√≥n")
    st.session_state["remediacion"] = {
        "porcentaje": porcentaje_remediacion,
        "total_grados_2_5": total_estudiantes_remediacion,
        "estimado_remediacion": estimado
    }

# Paso 11: Selecci√≥n de pruebas (Monitoreo)
if "Monitoreo y Evaluaci√≥n" in componentes and any(e in estrategias for e in ["Primero", "Remediaci√≥n"]):
    st.header("üîç M√≥dulo de Monitoreo y Evaluaci√≥n")
    st.markdown("### üìÅ Selecciona las pruebas que deseas aplicar:")
    pruebas_disponibles = ["EGRA entrada", "EGRA salida"]
    if "Primero" in estrategias:
        pruebas_disponibles.extend(["Semana 10", "Semana 20", "Semana 30", "Semana 40"])
    if "Remediaci√≥n" in estrategias:
        pruebas_disponibles.extend(["Semana 1", "Semana 7", "Semana 14"])
    pruebas_seleccionadas = st.multiselect("Pruebas disponibles seg√∫n las estrategias seleccionadas:", pruebas_disponibles)
    st.session_state["pruebas_monitoreo"] = pruebas_seleccionadas

# Paso 12: Aplicaci√≥n de pruebas y productos asociados
if "pruebas_monitoreo" in st.session_state and st.session_state["pruebas_monitoreo"]:
    st.header("üìä Aplicaci√≥n de pruebas y productos por evaluaci√≥n")

    productos_estandar = [
        "Informe de resultados",
        "Presentaci√≥n a actores",
        "Informe t√©cnico consolidado",
        "Devoluci√≥n a instituciones"
    ]

    configuracion_pruebas = {}

    for prueba in st.session_state["pruebas_monitoreo"]:
        st.subheader(f"üß™ {prueba}")

        incluir_aplicacion = st.radio(
            f"¬øDeseas incluir la aplicaci√≥n de la prueba '{prueba}'?",
            ["S√≠", "No"],
            key=f"aplicacion_{prueba}"
        )

        productos_incluidos = st.multiselect(
            f"Selecciona los productos que deseas incluir para '{prueba}':",
            productos_estandar,
            default=productos_estandar,
            key=f"productos_{prueba}"
        )

        configuracion_pruebas[prueba] = {
            "aplicacion": incluir_aplicacion == "S√≠",
            "productos": productos_incluidos
        }

    st.session_state["configuracion_pruebas"] = configuracion_pruebas

from openpyxl import load_workbook
from io import BytesIO

st.markdown("---")
st.subheader("üì§ Exportar archivo Excel")

# Pregunta AIU antes del bot√≥n de exportaci√≥n
st.markdown("---")
st.subheader("‚öôÔ∏è Porcentaje de AIU")
aiu = st.number_input(
    "Indica el % de AIU (Administraci√≥n, Imprevistos y Utilidad):",
    min_value=0,
    max_value=100,
    value=35,
    step=1
)
st.session_state["aiu_porcentaje"] = aiu



# Bot√≥n para exportar
if st.button("üì• Generar archivo Excel con datos"):
    excel_path = "estructura de costos formuLIA.xlsx"

    try:
        wb = load_workbook(excel_path)
        ws = wb[" FORMACI√ìN"]

        # Recuperar datos
        formacion = st.session_state.get("formacion_logistica", {})
        grupos = st.session_state.get("grupos_formacion", {}).get("n_grupos", 1)
        num_viajes = formacion.get("num_viajes", 3)
        horas_viaje = formacion.get("horas_viaje", 0)
        temas = formacion.get("temas", [])

        costo_transporte = formacion.get("costo_transporte", 0)
        valor_hotel = formacion.get("valor_hotel", 0)

        refrigerios = st.session_state.get("refrigerios", {})
        valor_unitario_refrigerio = refrigerios.get("valor_unitario", 8000)
        cantidad_refrigerios = refrigerios.get("cantidad_refrigerios", 0)
        num_sesiones = refrigerios.get("num_sesiones", 0)

        total_docentes = sum(
            info["docentes"]
            for sede in st.session_state["poblacion_por_sede"].values()
            for info in sede.values()
        )

        aiu = st.session_state.get("aiu_porcentaje", 35)

        # ACTUALIZAR HOJA DE FORMACI√ìN
        for row in range(3, 10):
            tema = ws[f"B{row}"].value
            if tema in temas:
                horas = ws[f"C{row}"].value
                if isinstance(horas, (int, float)):
                    ws[f"C{row}"] = horas * grupos
                ws[f"F{row}"] = horas_viaje
                ws[f"J{row}"] = aiu / 100
                # No tocamos O si est√° seleccionado
            else:
                ws[f"C{row}"] = 0
                ws[f"F{row}"] = 0
                ws[f"J{row}"] = aiu / 100
                ws[f"O{row}"] = 0  # ‚Üê limpiar columna O si el tema no fue seleccionado

        # Otras celdas clave
        ws["C14"] = valor_hotel
        ws["C16"] = costo_transporte
        ws["D16"] = num_viajes
        ws["D14"] = num_viajes * 3
        ws["D15"] = num_viajes * 3
        ws["C24"] = valor_unitario_refrigerio
        ws["C23"] = int(round(total_docentes * 1.2))
        ws["C25"] = num_sesiones
        ws["E33"] = total_docentes
        ws["E18"] = aiu / 100
        ws["C27"] = aiu / 100


        # Guardar y descargar
        output = BytesIO()
        wb.save(output)
        output.seek(0)

        st.success("‚úÖ Archivo Excel actualizado correctamente.")
        st.download_button(
            label="‚¨áÔ∏è Descargar archivo actualizado",
            data=output,
            file_name="formulIA_actualizado.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"‚ùå Error al procesar el archivo Excel: {e}")
from docx import Document
import streamlit as st
from docx.oxml import OxmlElement
from docx.oxml.ns import qn

# === Cargar documento base ===
ruta_word = "Ejemplo propuesta.docx"
ruta_salida = "Propuesta_FormulIA.docx"
doc = Document(ruta_word)

# === Extraer datos desde session_state ===
nombre_organizacion = st.session_state.get("organizacion", "ORGANIZACI√ìN")
municipio = st.session_state.get("municipio", "MUNICIPIO")
num_sedes = st.session_state.get("num_sedes", 0)
lista_sedes = st.session_state.get("sedes", [])
total_estudiantes = st.session_state.get("total_estudiantes", 0)
total_docentes = st.session_state.get("total_docentes", 0)

# === Funci√≥n para pluralizar correctamente ===
def frase_instituciones(n):
    return "1 Instituci√≥n Educativa" if n == 1 else f"{n} Instituciones Educativas"

texto_sedes = frase_instituciones(num_sedes)

# === Preparar texto de sedes con gram√°tica correcta ===
if num_sedes == 1 and lista_sedes:
    sedes_como_texto = f"Instituci√≥n Educativa {lista_sedes[0]}"
else:
    sedes_como_texto = ", ".join([f"Instituci√≥n Educativa {s}" for s in lista_sedes if s])

# === Lista de frases posibles que indican cantidad de sedes ===
reemplazos_cantidad = [
    "3 Instituciones Educativas",
    "3 instituciones educativas",
    "3 sedes",
    "3 I.E.",
    "tres instituciones educativas",
    "Tres Instituciones Educativas"
]

# === Frase con nombres fijos en la vi√±eta de poblaci√≥n focalizada ===
marcador_sedes_fijas = "Luis Felipe Cabrera, Instituci√≥n Educativa de Santa Ana, Instituci√≥n Educativa De Ararca"

# === Reemplazos generales en los p√°rrafos del documento ===
for p in doc.paragraphs:
    if "Fundaci√≥n Santo Domingo" in p.text:
        p.text = p.text.replace("Fundaci√≥n Santo Domingo", nombre_organizacion)
    if "Bar√∫" in p.text:
        p.text = p.text.replace("Bar√∫", municipio)
    for texto_original in reemplazos_cantidad:
        if texto_original in p.text:
            p.text = p.text.replace(texto_original, texto_sedes)
    if marcador_sedes_fijas in p.text:
        p.text = p.text.replace(marcador_sedes_fijas, sedes_como_texto)

# === Buscar el p√°rrafo con las sedes para insertar vi√±etas justo despu√©s ===
insert_after_paragraph = None
for p in doc.paragraphs:
    if marcador_sedes_fijas in p.text or sedes_como_texto in p.text:
        insert_after_paragraph = p
        break

# === Eliminar vi√±etas antiguas ===
vi√±etas_antiguas = [
    "‚Ä¢ 37 docentes de transici√≥n a tercero",
    "‚Ä¢ 568 estudiantes de transici√≥n a primero",
    "‚Ä¢ 525 estudiantes de segundo a tercero"
]
for p in doc.paragraphs:
    if any(v in p.text for v in vi√±etas_antiguas):
        p.clear()

# === Funci√≥n para insertar p√°rrafo despu√©s de uno existente ===
def insertar_parrafo_despues(parrafo, texto):
    nuevo_parrafo = OxmlElement("w:p")
    run = OxmlElement("w:r")
    t = OxmlElement("w:t")
    t.text = texto
    run.append(t)
    nuevo_parrafo.append(run)
    parrafo._element.addnext(nuevo_parrafo)

# === Insertar nuevas vi√±etas con totales reales ===
if insert_after_paragraph is not None:
    insertar_parrafo_despues(insert_after_paragraph, f"‚Ä¢ {total_estudiantes} estudiantes")
    insertar_parrafo_despues(insert_after_paragraph, f"‚Ä¢ {total_docentes} docentes")

# === Guardar documento personalizado ===
doc.save(ruta_salida)

# === Mostrar bot√≥n para descarga ===
with open(ruta_salida, "rb") as f:
    st.download_button(
        label="üìÑ Descargar propuesta Word",
        data=f,
        file_name="Propuesta_FormulIA.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
